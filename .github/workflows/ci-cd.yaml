
name: CI-CD

on:
  push:
    branches:
      - main

jobs:
  Deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Create .env file from secrets
        run: |
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "ASTRA_DB_APPLICATION_TOKEN=${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}" >> .env
          echo "ASTRA_DB_KEYSPACE=${{ secrets.ASTRA_DB_KEYSPACE }}" >> .env
          echo "ASTRA_DB_API_ENDPOINT=${{ secrets.ASTRA_DB_API_ENDPOINT }}" >> .env
          echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" >> .env
          echo "HUGGINGFACEHUB_API_TOKEN=${{ secrets.HUGGINGFACEHUB_API_TOKEN }}" >> .env
      
      - name: Build Docker Image
        run: |
          docker build -t flipkart-app:v1 .
        
      - name: Log in to Docker 
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      
      - name: Push Image to Docker Hub
        run: |
          docker tag flipkart-app:latest ${{ secrets.DOCKER_USERNAME }}/flipkart-app:v1
          docker push ${{ secrets.DOCKER_USERNAME }}/flipkart-app:v1
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      

      # deployment using kubernetes
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Create llmops-secret in Kubernetes
        run: |
          kubectl delete secret llmops-secret --ignore-not-found
          kubectl create secret generic llmops-secret \
          --from-literal=GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
          --from-literal=ASTRA_DB_APPLICATION_TOKEN="${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}" \
          --from-literal=ASTRA_DB_KEYSPACE="${{ secrets.ASTRA_DB_KEYSPACE }}" \
          --from-literal=ASTRA_DB_API_ENDPOINT="${{ secrets.ASTRA_DB_API_ENDPOINT }}" \
          --from-literal=HF_TOKEN="${{ secrets.HF_TOKEN }}" \
          --from-literal=HUGGINGFACEHUB_API_TOKEN="${{ secrets.HUGGINGFACEHUB_API_TOKEN }}"
    
      - name: Deploy to EKS 
        run: |
          kubectl apply -f flask-deployment.yaml